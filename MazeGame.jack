// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Maze game. TODO
 */

class MazeGame {
	// Our "constants." This way, we aren't relying too much on magic numbers
	static int ROW_COUNT;
	static int COL_COUNT;
	static int ELEM_SIZE;

	static int TILE_EMPTY;
	static int TILE_WALL;
	static int TILE_ITEM;

	field Array maze;	// Will be formatted as maze[row][col],
						// and contains booleans. True means wall,
						// false means no wall.
	field Player p1;
	field int itemCount;

	
	constructor MazeGame new() {
		var int row;
		var int col;

		// Note that each element is 16x16, and our screen is
		// 512x256. Thus, our playfield has 16 rows and 32 columns.
		let ROW_COUNT = 16;
		let COL_COUNT = 32;
		let ELEM_SIZE = 16;

		let TILE_EMPTY = 0;
		let TILE_WALL = 1;
		let TILE_ITEM = 2;

		let itemCount = 0;

		let maze = Array.new(ROW_COUNT);

		// First, we shall create the array for each row. Then we
		// shall set each cell to false.
		let row = 0;
		while(row < ROW_COUNT) {
			let maze[row] = Array.new(COL_COUNT);

			let col = 0;
			while(col < COL_COUNT) {
				//let maze[row][col] = false;
				do setTile(row, col, TILE_EMPTY);
				let col = col + 1;
			}

			let row = row + 1;
		}

		// Now that we have generated our maze matrix, let's populate it.
		do loadMap();

		// Now that the walls are figured out, let's draw 'em.
		do drawLevel();
		do drawHUD();

		let p1 = Player.new(1,1);

		return this;
	}

	method void loadMap() {
		var int col;
		var int row;

		// Fill out the top row
		/*
		let col = 0;
		while(col < COL_COUNT) {
			do setTile(  0, col, TILE_WALL);
			let col = col + 1;
		}
		*/
		do placeHLine(0, 0, COL_COUNT - 1);
		do placeRect( 3, 14,  8, 27);
		do placeRect( 3,  6, 16, 18);
		do placeRect( 3,  8, 18, 22);
		do placeRect( 3,  8, 22, 27);
		do placeRect(11, 14, 16, 20);
		do placeRect(11, 14, 21, 27);

		do setTile( 9, 8, TILE_EMPTY);
		do setTile( 7,16, TILE_EMPTY);
		do setTile( 8,20, TILE_EMPTY);
		do setTile( 8,25, TILE_EMPTY);
		do setTile(12,16, TILE_EMPTY);
		do setTile(11,26, TILE_EMPTY);

		do setTile( 5,10, TILE_ITEM);
		do setTile( 5,12, TILE_ITEM);
		do setTile( 4,19, TILE_ITEM);
		do setTile( 4,20, TILE_ITEM);
		do setTile( 6,23, TILE_ITEM);
		do setTile( 5,24, TILE_ITEM);
		do setTile(13,19, TILE_ITEM);
		do setTile(13,22, TILE_ITEM);
		do setTile(12,23, TILE_ITEM);

/*
		do setTile( 4,  4, TILE_WALL);
		do setTile( 4,  5, TILE_WALL);
		do setTile( 5,  5, TILE_WALL);
		do setTile( 2,  4, TILE_ITEM);
		*/

		return;
	}

	method void placeHLine(int row, int col1, int col2) {
		while(col1 < (col2+1)) {
			do setTile(row, col1, TILE_WALL);
			let col1 = col1 + 1;
		}

		return;
	}

	method void placeVLine(int row1, int row2, int col) {
		while(row1 < (row2+1)) {
			do setTile(row1, col, TILE_WALL);
			let row1 = row1 + 1;
		}

		return;
	}

	method void placeRect(int row1, int row2, int col1, int col2) {
		do placeHLine(row1, col1, col2);
		do placeHLine(row2, col1, col2);
		do placeVLine(row1, row2, col1);
		do placeVLine(row1, row2, col2);

		return;
	}

	method void dispose() {
		var int row;
		var Array rowPtr;
		let row = 0;

		while(row < ROW_COUNT) {
			let rowPtr = maze[row];
			do rowPtr.dispose();
			let row = row + 1;
		}

		do maze.dispose();
		do p1.dispose();

		return;
	}

	method void run() {
		// Loosely based on the square run method
		var int newCol;
		var int newRow;
		var char key;
		var boolean exit;
		let exit = false;

		while(~exit) {
			// Don't do anything until the player hits a key
			while(key = 0) {
				let key = Keyboard.keyPressed();
			}

			let newCol = p1.getCol();
			let newRow = p1.getRow();

			if(key = 81)  { let exit = true; }			// q key
			if(key = 131) { let newRow = newRow - 1; }	// up
			if(key = 133) { let newRow = newRow + 1; }	// down
			if(key = 130) { let newCol = newCol - 1; }	// left
			if(key = 132) { let newCol = newCol + 1; }	// right

			// If either row or column has changed...
			if((~(newCol = p1.getCol())) | (~(newRow = p1.getRow()))) {
				// ...then we want a different spot. Now we'll check to make sure
				// everything is in bounds and we aren't trying to go through a wall.
				if((newCol > -1) & (newCol < COL_COUNT) &
				   (newRow > -1) & (newRow < ROW_COUNT)
				) {
					// Note that we can ONLY CHECK THIS if our desired position
					// is within bounds. Hence, this is its own condition check.
					if(~(getTile(newRow, newCol) = TILE_WALL)) {
						do p1.move(newCol, newRow);

						if(getTile(newRow, newCol) = TILE_ITEM) {
							do setTile(newRow, newCol, TILE_EMPTY);
							let itemCount = itemCount + 1;
							do drawHUD();
						}
					}
				}
			}

			// Now we don't want to do anything until the player
			// stops pressing the key.
			while(~(key = 0)) {
				let key = Keyboard.keyPressed();
			}

		}

		return;
	}

	method int getTile(int row, int col) {
		var Array rowPtr;
		
		let rowPtr = maze[row];
		return rowPtr[col];
	}

	method void setTile(int row, int col, int val) {
		var Array rowPtr;

		let rowPtr = maze[row];
		let rowPtr[col] = val;

		return;
	}


	//////////////////////
	/// DRAW FUNCTIONS ///
	//////////////////////

	method void drawLevel() {

		var int row;
		var int col;

		// Ok, now that we've done that, we'll need to draw
		// each of the walls.
		let row = 0;
		while(row < ROW_COUNT) {
			let col = 0;
			while(col < COL_COUNT) {
				
				if(getTile(row, col) = TILE_WALL) { do drawWall(row, col); }
				if(getTile(row, col) = TILE_ITEM) { do drawItem(row, col); }

				let col = col + 1;
			}

			let row = row + 1;
		}

		return;
	}

	method void drawWall(int row, int col) {
		var int x1;
		var int y1;
		var int x2;
		var int y2;
	
		let x1 = col * ELEM_SIZE;
		let x2 = x1 + ELEM_SIZE - 1;

		let y1 = row * ELEM_SIZE;
		let y2 = y1 + ELEM_SIZE - 1;

		do Screen.drawRectangle(x1, y1, x2, y2);

		return;
	}

	method void drawItem(int row, int col) {

		do Screen.drawCircle(
			(col * ELEM_SIZE) + (ELEM_SIZE/2),
			(row * ELEM_SIZE) + (ELEM_SIZE/2),
			ELEM_SIZE / 4
		);

		return;
	}

	method void drawHUD() {
		do Output.moveCursor(0, 0);
		do Output.printString("Cookies: ");
		do Output.printInt(itemCount);

		return;
	}

}



